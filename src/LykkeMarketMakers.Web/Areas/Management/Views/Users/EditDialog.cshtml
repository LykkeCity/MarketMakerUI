@using System.Threading.Tasks
@using LykkeMarketMakers.Web.Models.ViewComponentsViewModels
@using LykkeMarketMakers.Web.Translates
@using LykkeMarketMakers.Web.ViewComponents
@model LykkeMarketMakers.Web.Areas.Management.Models.EditUserDialogViewModel

@{
    Layout = "~/Views/Shared/_ModalDialogLayout.cshtml";
}

<form id="frmEditUser">
    <table style="width:100%">
        <tr>
            <td>
                @if (string.IsNullOrEmpty(Model.User.Id))
                {
                    @await Component.InvokeAsync(nameof(InputWithLabelOnTop), new { model = new InputWithLabelModel { Name = "Id", Caption = Phrases.UserName, Placeholder = Phrases.UserName, Lg = true }})
                    <input name="Create" value="1" type="hidden" />
                }
                else
                {
                    <input name="Id" value="@Model.User.Id" type="hidden" />
                }
                
                @await Component.InvokeAsync(nameof(InputWithLabelOnTop), new { model = new InputWithLabelModel { Name = "FullName", Caption = Phrases.FullName, Placeholder = Phrases.FullName, Lg = true } })

                @if (string.IsNullOrEmpty(Model.User.Id))
                {
                    @await Component.InvokeAsync(nameof(InputWithLabelOnTop), new { model = new InputWithLabelModel { Name = "Password", Caption = Phrases.Password, Placeholder = Phrases.Password, Lg = true, Type = "password"} })
                }

                <div class="form-group">
                    <label class="control-label">@Phrases.Roles</label>
                    @(await Component.InvokeAsync(nameof(Select), new
                      {
                          model = new SelectModel
                          {
                              Name = "Roles",
                              IsMultiple = true,
                              Values = Model.Roles.Select(role => new KeyValuePair<string, string>(role.Key, role.Value.Name)).ToList(),
                              CurrentValues = Model.User.Roles
                          }
                      }))
                </div>
                
                <div class="form-group">
                    <input type="checkbox" name="IsAdmin" checked="@(Model.User.IsAdmin ? "checked" : null)" /> @Phrases.IsAdmin
                </div>
            </td>
        </tr>
    </table>
</form>

@(await Component.InvokeAsync(nameof(SaveCancelButtonsPair), new
{
    model = new SaveCancelButtonsPairModel
    {
        Url = Url.Action("Edit"),
        FormId = "#frmEditUser"
    }
}))
